// Copyright (c) 2023 Ziga Miklosic
// All Rights Reserved
// This software is under MIT licence (https://opensource.org/licenses/MIT)
////////////////////////////////////////////////////////////////////////////////
/**
*@file      cpp_template.cpp
*@brief     C++ source code template for general use
*@author    Ziga Miklosic
*@email     ziga.miklosic@gmail.com
*@date      xx.xx.xxxx
*@version   Vx.x.x
*/
////////////////////////////////////////////////////////////////////////////////
/*!
* @addtogroup "TEMPLATE"
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////

// TODO: Only debugging
//#include <iostream>

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

/**
 *  Enable/disable debug mode
 *
 *  @note   Used only for development process
 */
#define RING_BUFFER_DEBUG_EN            0



////////////////////////////////////////////////////////////////////////////////
// Variables
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Function prototypes
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Functions
//////////////////////////////////////////////////////////////s//////////////////


////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup "TEMPLATE"_API
* @{ <!-- BEGIN GROUP -->
*
* 	Following function are part of "TEMPLATE" API.
*/
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
/*!
* @brief    	Template Class Constructor
*
* @param[in]	p_name	- Name of class
* @return       void
*/
////////////////////////////////////////////////////////////////////////////////
template<typename T>
RingBuffer<T>::RingBuffer(const uint32_t size, const ring_buffer_attr_t * const attr) : size(size)
{
    std::cout << "RingBuffer created..." << std::endl;

    if ( nullptr != attr )
    {
        // Dynamically allocate memory
        if ( nullptr == attr->p_mem )
        {
            // Allocate buffer space
            p_data = new T ( size );

            // Allocation success
            if ( nullptr != p_data )
            {
                std::cout << "Allocation success!" << std::endl;
            }

            // Allocation failed
            else
            {
                std::cout << "Allocation fail!" << std::endl;
            }
        }

        // Statically allocated memory
        else
        {
            p_data = (T*) attr->p_mem;
        }
    }
}


////////////////////////////////////////////////////////////////////////////////
/*!
* @brief    	Template Class Desctructor
*
* @param[in]	p_name	- Name of class
* @return       void
*/
////////////////////////////////////////////////////////////////////////////////
template<typename T>
RingBuffer<T>::~RingBuffer()
{
    std::cout << "RingBuffer destroyed..." << std::endl;

}

template<typename T>
ring_buffer_status_t RingBuffer<T>::add(const T item)
{
    ring_buffer_status_t status = eRING_BUFFER_OK;

    std::cout << "Adding..." << std::endl;

    return status;
}

template<typename T>
ring_buffer_status_t RingBuffer<T>::get(const T *p_item)
{
    ring_buffer_status_t status = eRING_BUFFER_OK;

    std::cout << "Getting..." << std::endl;

    return status;
}




////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////


